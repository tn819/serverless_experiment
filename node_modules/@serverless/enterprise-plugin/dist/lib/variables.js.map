{"version":3,"sources":["../../src/lib/variables.js"],"names":["hookIntoVariableGetter","ctx","secrets","accessKey","getValueFromSource","sls","variables","variableString","startsWith","state","secretsUsed","add","substring","processedInput","commands","split","Error","service","key","substr","length","outputName","subkey","app","tenant","stage","provider","getStage","region","getRegion","value","_","get","bind"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEO,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,GAAD,EAAMC,OAAN,EAAeC,SAAf,EAA6B;AAAA,MACzDC,kBADyD,GAClCH,GAAG,CAACI,GAAJ,CAAQC,SAD0B,CACzDF,kBADyD;;AAGjEH,EAAAA,GAAG,CAACI,GAAJ,CAAQC,SAAR,CAAkBF,kBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAuC,iBAAOG,cAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBACjCA,cAAc,CAACC,UAAf,CAA2B,UAA3B,CADiC;AAAA;AAAA;AAAA;;AAEnCP,cAAAA,GAAG,CAACQ,KAAJ,CAAUC,WAAV,CAAsBC,GAAtB,CAA0BJ,cAAc,CAACK,SAAf,CAAyB,CAAzB,CAA1B;;AAFmC,oBAG/BX,GAAG,CAACI,GAAJ,CAAQQ,cAAR,CAAuBC,QAAvB,CAAgC,CAAhC,MAAuC,OAHR;AAAA;AAAA;AAAA;;AAAA,+CAI1B,EAJ0B;;AAAA;AAAA,kBAM9BZ,OAAO,CAACK,cAAc,CAACQ,KAAf,CAAsB,UAAtB,EAAiC,CAAjC,CAAD,CANuB;AAAA;AAAA;AAAA;;AAAA,oBAO3B,IAAIC,KAAJ,CAAW,MAAKT,cAAe,eAA/B,CAP2B;;AAAA;AAAA,+CAS5BL,OAAO,CAACK,cAAc,CAACQ,KAAf,CAAsB,UAAtB,EAAiC,CAAjC,CAAD,CATqB;;AAAA;AAAA,mBAU1BR,cAAc,CAACC,UAAf,CAA2B,QAA3B,CAV0B;AAAA;AAAA;AAAA;;AAAA,oBAW/BP,GAAG,CAACI,GAAJ,CAAQQ,cAAR,CAAuBC,QAAvB,CAAgC,CAAhC,MAAuC,OAXR;AAAA;AAAA;AAAA;;AAAA,+CAY1B,EAZ0B;;AAAA;AAc7BG,cAAAA,OAd6B,GAcnBV,cAAc,CAACK,SAAf,CAAyB,CAAzB,EAA4BG,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,EAA0C,CAA1C,CAdmB;AAe7BG,cAAAA,GAf6B,GAevBX,cAAc,CAACK,SAAf,CAAyB,CAAzB,EAA4BO,MAA5B,CAAmCF,OAAO,CAACG,MAA3C,CAfuB;AAgB7BC,cAAAA,UAhB6B,GAgBhBH,GAAG,CAACH,KAAJ,CAAU,GAAV,EAAe,CAAf,CAhBgB;AAiB7BO,cAAAA,MAjB6B,GAiBpBJ,GAAG,CAACC,MAAJ,CAAWE,UAAU,CAACD,MAAX,GAAoB,CAA/B,CAjBoB;AAAA;AAAA,qBAkBX,mCAAiB;AACvCjB,gBAAAA,SADuC;AAEvCkB,gBAAAA,UAFuC;AAGvCJ,gBAAAA,OAHuC;AAIvCM,gBAAAA,GAAG,EAAEtB,GAAG,CAACI,GAAJ,CAAQY,OAAR,CAAgBM,GAJkB;AAKvCC,gBAAAA,MAAM,EAAEvB,GAAG,CAACI,GAAJ,CAAQY,OAAR,CAAgBO,MALe;AAMvCC,gBAAAA,KAAK,EAAExB,GAAG,CAACyB,QAAJ,CAAaC,QAAb,EANgC;AAOvCC,gBAAAA,MAAM,EAAE3B,GAAG,CAACyB,QAAJ,CAAaG,SAAb;AAP+B,eAAjB,CAlBW;;AAAA;AAAA;AAkB3BC,cAAAA,MAlB2B,SAkB3BA,KAlB2B;;AAAA,mBA2B/BR,MA3B+B;AAAA;AAAA;AAAA;;AAAA,+CA4B1BS,gBAAEC,GAAF,CAAMF,MAAN,EAAaR,MAAb,CA5B0B;;AAAA;AAAA,+CA8B5BQ,MA9B4B;;AAAA;AAiC/BA,cAAAA,KAjC+B,GAiCvB1B,kBAAkB,CAAC6B,IAAnB,CAAwBhC,GAAG,CAACI,GAAJ,CAAQC,SAAhC,EAA2CC,cAA3C,CAjCuB;AAAA,+CAkC9BuB,KAlC8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvC;;AAAA;AAAA;AAAA;AAAA,MAHiE,CAwCjE;;;AACA,SAAO,YAAM;AACX7B,IAAAA,GAAG,CAACI,GAAJ,CAAQC,SAAR,CAAkBF,kBAAlB,GAAuCA,kBAAvC;AACD,GAFD;AAGD,CA5CM","sourcesContent":["import _ from 'lodash'\nimport { getStateVariable } from '@serverless/platform-sdk'\n\nexport const hookIntoVariableGetter = (ctx, secrets, accessKey) => {\n  const { getValueFromSource } = ctx.sls.variables\n\n  ctx.sls.variables.getValueFromSource = async (variableString) => {\n    if (variableString.startsWith(`secrets:`)) {\n      ctx.state.secretsUsed.add(variableString.substring(8))\n      if (ctx.sls.processedInput.commands[0] === 'login') {\n        return {}\n      }\n      if (!secrets[variableString.split(`secrets:`)[1]]) {\n        throw new Error(`$\\{${variableString}} not defined`)\n      }\n      return secrets[variableString.split(`secrets:`)[1]]\n    } else if (variableString.startsWith(`state:`)) {\n      if (ctx.sls.processedInput.commands[0] === 'login') {\n        return {}\n      }\n      const service = variableString.substring(6).split('.', 1)[0]\n      const key = variableString.substring(6).substr(service.length)\n      const outputName = key.split('.')[1]\n      const subkey = key.substr(outputName.length + 2)\n      const { value } = await getStateVariable({\n        accessKey,\n        outputName,\n        service,\n        app: ctx.sls.service.app,\n        tenant: ctx.sls.service.tenant,\n        stage: ctx.provider.getStage(),\n        region: ctx.provider.getRegion()\n      })\n      if (subkey) {\n        return _.get(value, subkey)\n      }\n      return value\n    }\n\n    const value = getValueFromSource.bind(ctx.sls.variables)(variableString)\n    return value\n  }\n\n  // return a restore function (mostly for testing)\n  return () => {\n    ctx.sls.variables.getValueFromSource = getValueFromSource\n  }\n}\n"],"file":"variables.js"}